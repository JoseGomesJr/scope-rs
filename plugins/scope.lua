---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by matheuswhite.
--- DateTime: 23/01/24 18:42
---

function bytes2str(bytes)
    msg_str = ''

    for _, byte in pairs(bytes) do
        msg_str = msg_str .. string.char(byte)
    end

    return msg_str
end

function str2bytes(str)
    bytes = {}
    for _, c in utf8.codes(str) do
        table.insert(bytes, c)
    end
    return bytes
end

local function print_error(filename)
    local f = io.open(filename, 'r')
    while true do
        local content = f:read('l')
        if content == nil then break end
        scope.eprintln(content)
    end
    f:close()
end

local function osname()
    return package.config.sub(1,1) == "\\" and "win" or "unix"
end

local function run_process_unix(cmd, requisite)
    local err_file = '/tmp/' .. os.time(os.date("!*t")) .. '.txt'
    if requisite ~= nil then
        cmd = requisite .. ' 2>' .. err_file .. ' && ' .. cmd
    end

    local pipe = io.popen(cmd .. ' 2>' .. err_file, 'r')
    while true do
        local line = pipe:read('l')
        if line == nil then break end
        scope.println(line)
    end
    pipe:close()

    print_error(err_file)
end

scope = {
    println = function(msg)
        coroutine.yield({ ":println", msg })
    end,
    eprintln = function(msg)
        coroutine.yield({ ":eprintln", msg })
    end,
    connect = function(port, baud_rate)
        coroutine.yield({ ":connect", port, baud_rate })
    end,
    disconnect = function()
        coroutine.yield({ ":disconnect" })
    end,
    reconnect = function()
        coroutine.yield({ ":reconnect" })
    end,
    serial_tx = function(msg)
        coroutine.yield({ ":serial_tx", msg })
    end,
    sleep = function(time)
        coroutine.yield({ ":sleep", time })
    end,
    run_processes = function(process, requisite)
        scope.println(process)
        if osname() == "unix" then
            run_process_unix(process, requisite)
        else
            scope.eprintln("Doesn't support windows yet")
        end
    end
}
